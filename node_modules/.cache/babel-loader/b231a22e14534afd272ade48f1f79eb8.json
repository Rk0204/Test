{"ast":null,"code":"var _jsxFileName = \"/home/ecom/Project/find-my-freelancer/src/components/homepage/autocomplete.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nexport class Autocomplete extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      activeOption: 0,\n      filteredOptions: [],\n      showOptions: false,\n      userInput: \"\"\n    };\n\n    this.onChange = e => {\n      const {\n        options\n      } = this.props;\n      const userInput = e.currentTarget.value;\n      const filteredOptions = options.filter(option => option.toLowerCase().indexOf(userInput.toLowerCase()) > -1);\n      this.setState({\n        activeOption: 0,\n        filteredOptions,\n        showOptions: true,\n        userInput\n      });\n    };\n\n    this.onClick = e => {\n      this.setState({\n        activeOption: 0,\n        filteredOption: [],\n        showOptions: false,\n        userInput: e.currentTarget.innerText\n      });\n    };\n\n    this.onKeyDown = e => {\n      const {\n        activeOption,\n        filteredOptions\n      } = this.state;\n\n      if (e.keyCode === 13) {\n        this.setState({\n          activeOption: 0,\n          showSuggestions: false,\n          userInput: filteredOptions[activeOption]\n        });\n      } else if (e.keyCode === 38) {\n        if (activeOption === 0) {\n          return;\n        }\n\n        this.setState({\n          activeOption: activeOption - 1\n        });\n      } else if (e.keyCode === 40) {\n        if (activeOption - 1 === filteredOptions.length) {\n          return;\n        }\n\n        this.setState({\n          activeOption: activeOption + 1\n        });\n      }\n    };\n  }\n\n  render() {\n    const {\n      onChange,\n      onKeyDown,\n      state: {\n        activeOption,\n        filteredOptions,\n        showOptions,\n        userInput\n      }\n    } = this;\n    let optionList;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"search\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      className: \"search-box\",\n      onChange: onChange,\n      onKeyDown: onKeyDown,\n      value: userInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }), optionList));\n  }\n\n}\nAutocomplete.propTypes = {\n  options: PropTypes.instanceOf(Array).isRequired\n};\nexport default Autocomplete;","map":{"version":3,"sources":["/home/ecom/Project/find-my-freelancer/src/components/homepage/autocomplete.js"],"names":["React","Component","PropTypes","Autocomplete","state","activeOption","filteredOptions","showOptions","userInput","onChange","e","options","props","currentTarget","value","filter","option","toLowerCase","indexOf","setState","onClick","filteredOption","innerText","onKeyDown","keyCode","showSuggestions","length","render","optionList","propTypes","instanceOf","Array","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nexport class Autocomplete extends Component {\n  static propTypes = {\n    options: PropTypes.instanceOf(Array).isRequired\n  };\n  state = {\n    activeOption: 0,\n    filteredOptions: [],\n    showOptions: false,\n    userInput: \"\"\n  };\n\n  onChange = e => {\n    const { options } = this.props;\n    const userInput = e.currentTarget.value;\n    const filteredOptions = options.filter(\n      option => option.toLowerCase().indexOf(userInput.toLowerCase()) > -1\n    );\n    this.setState({\n      activeOption: 0,\n      filteredOptions,\n      showOptions: true,\n      userInput\n    });\n  };\n\n  onClick = e => {\n    this.setState({\n      activeOption: 0,\n      filteredOption: [],\n      showOptions: false,\n      userInput: e.currentTarget.innerText\n    });\n  };\n\n  onKeyDown = e => {\n    const { activeOption, filteredOptions } = this.state;\n    if (e.keyCode === 13) {\n      this.setState({\n        activeOption: 0,\n        showSuggestions: false,\n        userInput: filteredOptions[activeOption]\n      });\n    } else if (e.keyCode === 38) {\n      if (activeOption === 0) {\n        return;\n      }\n      this.setState({ activeOption: activeOption - 1 });\n    } else if (e.keyCode === 40) {\n      if (activeOption - 1 === filteredOptions.length) {\n        return;\n      }\n      this.setState({ activeOption: activeOption + 1 });\n    }\n  };\n\n  render() {\n    const {\n      onChange,\n      onKeyDown,\n      state: { activeOption, filteredOptions, showOptions, userInput }\n    } = this;\n    let optionList;\n    return (\n      <React.Fragment>\n        <div className=\"search\">\n          <input\n            type=\"text\"\n            className=\"search-box\"\n            onChange={onChange}\n            onKeyDown={onKeyDown}\n            value={userInput}\n          />\n          {optionList}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\nexport default Autocomplete;\n"]},"metadata":{},"sourceType":"module"}